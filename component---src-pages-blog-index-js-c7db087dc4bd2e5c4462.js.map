{"version":3,"sources":["webpack:///./src/pages/blog/index.js"],"names":["colors","theme","fonts","fontSizes","StyledMainContainer","styled","Main","StyledTableContainer","div","media","tablet","StyledTable","table","transition","lightNavy","sm","lightestSlate","xl","xs","SFMono","mixins","flexCenter","ArchivePage","location","posts","data","allMarkdownRemark","edges","revealTitle","useRef","revealTable","revealPosts","useEffect","sr","reveal","current","srConfig","forEach","ref","i","rel","href","className","length","map","node","frontmatter","date","github","external","title","tags","key","el","Date","getFullYear","item","target","aria-label","name","pageQuery"],"mappings":"opBAUQA,EAA6BC,IAA7BD,OAAQE,EAAqBD,IAArBC,MAAOC,EAAcF,IAAdE,UAEjBC,EAAsBC,YAAOC,KAAV,4EAAGD,CAAH,MACnBE,EAAuBF,IAAOG,IAAV,6EAAGH,CAAH,4BAEtBI,IAAMC,OAFgB,MAMpBC,EAAcN,IAAOO,MAAV,oEAAGP,CAAH,6eAKXI,IAAMC,OALK,KAWCT,IAAMY,WAIEb,EAAOc,UAQ3BL,IAAMC,OAvBK,KAiCTD,IAAMC,OAjCG,IAkCIP,EAAUY,IAKhBf,EAAOgB,cACHb,EAAUc,GAIVd,EAAUe,GACRhB,EAAMiB,OAafC,IAAOC,YAiHJC,UAnGK,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,SACfC,EADoC,EAAXC,KACZC,kBAAkBC,MAE/BC,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MACrBE,EAAcF,iBAAO,IAO3B,OANAG,qBAAU,WACRC,IAAGC,OAAON,EAAYO,QAASC,sBAC/BH,IAAGC,OAAOJ,EAAYK,QAASC,sBAC/BL,EAAYI,QAAQE,SAAQ,SAACC,EAAKC,GAAN,OAAYN,IAAGC,OAAOI,EAAKF,mBAAa,GAAJG,SAC/D,IAGD,kBAAC,IAAD,CAAQhB,SAAUA,GAChB,kBAAC,SAAD,KACE,uDACA,0BAAMiB,IAAI,YAAYC,KAAK,mCAG7B,kBAACrC,EAAD,KACE,4BAAQkC,IAAKV,GACX,wBAAIc,UAAU,aAAd,QACA,uBAAGA,UAAU,YAAb,kCAGF,kBAACnC,EAAD,CAAsB+B,IAAKR,GACzB,kBAACnB,EAAD,KACE,+BACE,4BACE,oCACA,qCACA,wBAAI+B,UAAU,kBAAd,QACA,sCAGJ,+BACGlB,EAAMmB,OAAS,GACdnB,EAAMoB,KAAI,WAAWL,GAAO,IAAD,IAAdM,KAOFC,YALPC,EAFuB,EAEvBA,KACAC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,SACAC,EALuB,EAKvBA,MACAC,EANuB,EAMvBA,KAEF,OACE,wBAAIC,IAAKb,EAAGD,IAAK,SAAAe,GAAE,OAAKtB,EAAYI,QAAQI,GAAKc,IAC/C,wBAAIX,UAAU,iBAAd,GAAkC,IAAIY,KAAKP,GAAMQ,eAEjD,wBAAIb,UAAU,SAASQ,GAEvB,wBAAIR,UAAU,uBACXS,EAAKR,OAAS,GACbQ,EAAKP,KAAI,SAACY,EAAMjB,GAAP,OACP,0BAAMa,IAAKb,GACRiB,EACA,GACAjB,IAAMY,EAAKR,OAAS,GAAK,0BAAMD,UAAU,aAAhB,UAKlC,wBAAIA,UAAU,SACZ,8BACGO,GACC,uBACER,KAAMQ,EACNQ,OAAO,SACPjB,IAAI,+BACJkB,aAAW,iBACX,kBAAC,IAAD,CAAeC,KAAK,YAGvBX,GACC,uBACEP,KAAMO,EACNS,OAAO,SACPjB,IAAI,+BACJkB,aAAW,eACX,kBAAC,IAAD,CAAeC,KAAK,wBAsB3C,IAAMC,EAAS","file":"component---src-pages-blog-index-js-c7db087dc4bd2e5c4462.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport { graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport sr from '@utils/sr';\nimport { srConfig } from '@config';\nimport { Layout } from '@components';\nimport { FormattedIcon } from '@components/icons';\nimport styled from 'styled-components';\nimport { theme, mixins, media, Main } from '@styles';\nconst { colors, fonts, fontSizes } = theme;\n\nconst StyledMainContainer = styled(Main)``;\nconst StyledTableContainer = styled.div`\n  margin: 100px -20px;\n  ${media.tablet`\n    margin: 100px -10px;\n  `};\n`;\nconst StyledTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n\n  .hide-on-mobile {\n    ${media.tablet`\n      display: none;\n    `};\n  }\n\n  tbody tr {\n    transition: ${theme.transition};\n\n    &:hover,\n    &:focus {\n      background-color: ${colors.lightNavy};\n    }\n  }\n  th,\n  td {\n    cursor: default;\n    line-height: 1.5;\n    padding: 10px 20px;\n    ${media.tablet`\n      padding: 10px;\n    `};\n  }\n  th {\n    text-align: left;\n  }\n  td {\n    &.year {\n      width: 10%;\n      ${media.tablet`\n        font-size: ${fontSizes.sm};\n      `};\n    }\n    &.title {\n      padding-top: 15px;\n      color: ${colors.lightestSlate};\n      font-size: ${fontSizes.xl};\n      font-weight: 700;\n    }\n    &.tags {\n      font-size: ${fontSizes.xs};\n      font-family: ${fonts.SFMono};\n      .separator {\n        margin: 0 5px;\n      }\n      span {\n        display: inline-block;\n      }\n    }\n    &.links {\n      span {\n        display: flex;\n        align-items: center;\n        a {\n          ${mixins.flexCenter};\n        }\n        a + a {\n          margin-left: 10px;\n        }\n        svg {\n          width: 20px;\n          height: 20px;\n        }\n      }\n    }\n  }\n`;\n\nconst ArchivePage = ({ location, data }) => {\n  const posts = data.allMarkdownRemark.edges;\n\n  const revealTitle = useRef(null);\n  const revealTable = useRef(null);\n  const revealPosts = useRef([]);\n  useEffect(() => {\n    sr.reveal(revealTitle.current, srConfig());\n    sr.reveal(revealTable.current, srConfig());\n    revealPosts.current.forEach((ref, i) => sr.reveal(ref, srConfig(i * 10)));\n  }, []);\n\n  return (\n    <Layout location={location}>\n      <Helmet>\n        <title>Blog | Bhavi Dhingra</title>\n        <link rel=\"canonical\" href=\"https://bhavidhingra.dev/blog\" />\n      </Helmet>\n\n      <StyledMainContainer>\n        <header ref={revealTitle}>\n          <h1 className=\"big-title\">Blog</h1>\n          <p className=\"subtitle\">A list of blogs Iâ€™ve written.</p>\n        </header>\n\n        <StyledTableContainer ref={revealTable}>\n          <StyledTable>\n            <thead>\n              <tr>\n                <th>Year</th>\n                <th>Title</th>\n                <th className=\"hide-on-mobile\">Tags</th>\n                <th>Link</th>\n              </tr>\n            </thead>\n            <tbody>\n              {posts.length > 0 &&\n                posts.map(({ node }, i) => {\n                  const {\n                    date,\n                    github,\n                    external,\n                    title,\n                    tags,\n                  } = node.frontmatter;\n                  return (\n                    <tr key={i} ref={el => (revealPosts.current[i] = el)}>\n                      <td className=\"overline year\">{`${new Date(date).getFullYear()}`}</td>\n\n                      <td className=\"title\">{title}</td>\n\n                      <td className=\"tags hide-on-mobile\">\n                        {tags.length > 0 &&\n                          tags.map((item, i) => (\n                            <span key={i}>\n                              {item}\n                              {''}\n                              {i !== tags.length - 1 && <span className=\"separator\">&middot;</span>}\n                            </span>\n                          ))}\n                      </td>\n\n                      <td className=\"links\">\n                        <span>\n                          {external && (\n                            <a\n                              href={external}\n                              target=\"_blank\"\n                              rel=\"nofollow noopener noreferrer\"\n                              aria-label=\"External Link\">\n                              <FormattedIcon name=\"Medium\" />\n                            </a>\n                          )}\n                          {github && (\n                            <a\n                              href={github}\n                              target=\"_blank\"\n                              rel=\"nofollow noopener noreferrer\"\n                              aria-label=\"GitHub Link\">\n                              <FormattedIcon name=\"GitHub\" />\n                            </a>\n                          )}\n                        </span>\n                      </td>\n                    </tr>\n                  );\n                })}\n            </tbody>\n          </StyledTable>\n        </StyledTableContainer>\n      </StyledMainContainer>\n    </Layout>\n  );\n};\nArchivePage.propTypes = {\n  location: PropTypes.object.isRequired,\n  data: PropTypes.object.isRequired,\n};\n\nexport default ArchivePage;\n\nexport const pageQuery = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/posts/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            date\n            title\n            tags\n            github\n            external\n          }\n          html\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}